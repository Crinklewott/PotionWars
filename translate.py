#!/usr/bin/python
"""
Copyright 2014 Andrew Russell

This file is part of PotionWars.
PotionWars is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PotionWars is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PotionWars.  If not, see <http://www.gnu.org/licenses/>.
"""

#This code is rank shit. I really really need to create a proper AST and then do transformations on that AST. But I'm a lazy bum and don't want to work on that right now.

#TODO: This only works when the player is the only character with dynamic clothing.
#Before the second episode is done, we'll need to implement a way to call liftlower, etc. on
#other characters.

#TODO: Handle \child, handle \continue

"""
Usage notes:
    In order to use this translation program, you need two things:
    1. A latex source file using the sprpgs.sty file that contains the transcript for the episode.
    2. A python file that contains the character and room definitions (these SHOULD NOT be added to the file generated by this program, because the generated file WILL BE OVERWRITTEN every time
    you run this script).
"""


import string
import re

class TranslateError(Exception):
    pass

IMPORTS = ['import universal', 'import textCommandsMusic', 'import person', 'import items', 'import pwenemies', 'import dungeonmode', 'import itemspotionwars', 'import random', 'import conversation',
        'import episode', 'import townmode']

inlineCommandsPlayer = {
    r'\hisher{}':"person.hisher()",  
    r'\HisHer{}':"person.HisHer()",  
    r'\himher{}':"person.himher()",  
    r'\HimHer{}':"person.HimHer()",  
    r'\heshe{}':"person.heshe()",  
    r'\HeShe{}':"person.HeShe()",  
    r'\heshell{}':"person.heshell()",  
    r'\HeShell{}':"person.HeShell()",  
    r'\himselfherself{}':"person.himselfherself()",  
    r'\HimselfHerself{}':"person.HimselfHerself()",  
    r'\mistermiss{}':"person.mistermiss()",  
    r'\MisterMiss{}':"person.MisterMiss()",  
    r'\manwoman{}':"person.manwoman()",  
    r'\ManWoman{}':"person.ManWoman()",  
    r'\hishers{}':"person.hishers()",  
    r'\HisHers{}':"person.HisHers()",  
    r'\boygirl{}':"person.boygirl()",  
    r'\BoyGirl{}':"person.BoyGirl()",  
    r'\manlady{}':"person.manlady()",  
    r'\ManLady{}':"person.ManLady()",  
    r'\kingqueen{}':"person.kingqueen()",  
    r'\KingQueen{}':"person.KingQueen()",  
    r'\lordlady{}':"person.lordlady()",  
    r'\LordLady{}':"person.LordLady()",  
    r'\brothersister{}':"person.brothersister()",  
    r'\BrotherSister{}':"person.BrotherSister()",  
    r'\menwomen{}':"person.menwomen()",  
    r'\MenWomen{}':"person.MenWomen()",  
    r'\sirmaam{}':"person.sirmaam()",  
    r'\SirMaam{}':"person.SirMaam()",  
    r'\underwearpanties{}':"person.underwearpanties()",  
    r'\bastardbitch{}':"person.bastardbitch()",  
    r'\BastardBitch{}':"person.BastardBitch()",  
    r'\weaponName{}':"universal.state.player.weapon().name",  
    r'\name{}':"universal.state.player.name",  
    r'\names{}':"universal.state.player.name, 's'",
    r'\nickname{}':"universal.state.player.nickname",  
    r'\nicknames{}':"universal.state.player.nickname, 's'",
    r'\weapon{}':"universal.state.player.weapon().name",
    r'\player{}':"universal.state.player",
    r'\name{}':"universal.state.player.name",
    r'\names{}': "universal.state.player.name, ''''s'''",
    r'\cladbottom{\pajama}': "universal.state.player.clad_bottom(pajama=True)",
    r'\cladbottom{\trousers}': "universal.state.player.clad_bottom()",
    r'\muscleadj{}': "universal.state.player.muscle_adj()",
    r'\bumadj{}': "universal.state.player.bum_adj()",
    r'\quiver{}': "universal.state.player.quiver()",
    r'\quivering{}': "universal.state.player.quivering()",
    r'\liftlower{}': "items.liftlower(universal.state.player.lower_clothing())",
    r'\lowerlift{}': "items.lowerlift(universal.state.player.lower_clothing())",
    r'\liftslowers{}': "items.liftlower(universal.state.player.lower_clothing())",
    r'\lowerslifts{}': "items.lowerslifts(universal.state.player.lower_clothing())",
    r'\liftlower{underwear}': "items.liftlower(universal.state.player.underwear())",
    r'\lowerlift{underwear}': "items.lowerlift(universal.state.player.underwear())",
    r'\liftslowers{underwear}': "items.liftlower(universal.state.player.underwear()), 's'",
    r'\lowerslifts{underwear}': "items.lowerslifts(universal.state.player.underwear()), 's'",
    r'\liftlower{pajamas}': "items.liftlower(universal.state.player.pajama_bottom())",
    r'\lowerlift{pajamas}': "items.lowerlift(universal.state.player.pajama_bottom())",
    r'\liftslowers{pajamas}': "items.liftslower(universal.state.player.pajama_bottom())",
    r'\lowerslifts{pajamas}': "items.lowerslifts(universal.state.player.pajama_bottom())",
    r'\pajamabottoms{}': "universal.state.player.pajama_bottom().name",
    r'\pajamas{}': "universal.state.player.pajama_top().name",
    r'\underwear{}':"universal.state.player.underwear().name",
    r'\shirt{}':"universal.state.player.shirt().name, '''",
    r'\stealth{}': "universal.state.player.stealth()",
    r'\warfare{}': "universal.state.player.warfare()",
    r'\magic{}': "universal.state.player.magic()",
    r'\grapple{}': "universal.state.player.grapple()",
    r'\resilience{}': "universal.state.player.resilience()",
    r'\keywords{}': "universal.state.player.keywords",
    r'\sondaughter{}': "person.sondaughter()",
    r'\SonDaughter{}': "person.SonDaughter()",
    }

inlineCommands = {
    r'\hisher{':"person.hisher(universal.state.get_character(",  
    r'\HisHer{':"person.HisHer(universal.state.get_character(",  
    r'\himher{':"person.himher(universal.state.get_character(",  
    r'\HimHer{':"person.HimHer(universal.state.get_character(",  
    r'\heshe{':"person.heshe(universal.state.get_character(",  
    r'\HeShe{':"person.HeShe(universal.state.get_character(",  
    r'\heshell{':"person.heshell(universal.state.get_character(",  
    r'\HeShell{':"person.HeShell(universal.state.get_character(",  
    r'\himselfherself{':"person.himselfherself(universal.state.get_character(",  
    r'\HimselfHerself{':"person.HimselfHerself(universal.state.get_character(",  
    r'\mistermiss{':"person.mistermiss(universal.state.get_character(",  
    r'\MisterMiss{':"person.MisterMiss(universal.state.get_character(",  
    r'\manwoman{':"person.manwoman(universal.state.get_character(",  
    r'\ManWoman{':"person.ManWoman(universal.state.get_character(",  
    r'\hishers{':"person.hishers(universal.state.get_character(",  
    r'\HisHers{':"person.HisHers(universal.state.get_character(",  
    r'\boygirl{':"person.boygirl(universal.state.get_character(",  
    r'\BoyGirl{':"person.BoyGirl(universal.state.get_character(",  
    r'\manlady{':"person.manlady(universal.state.get_character(",  
    r'\ManLady{':"person.ManLady(universal.state.get_character(",  
    r'\kingqueen{':"person.kingqueen(universal.state.get_character(",  
    r'\KingQueen{':"person.KingQueen(universal.state.get_character(",  
    r'\lordlady{':"person.lordlady(universal.state.get_character(",  
    r'\LordLady{':"person.LordLady(universal.state.get_character(",  
    r'\brothersister{':"person.brothersister(universal.state.get_character(",  
    r'\BrotherSister{':"person.BrotherSister(universal.state.get_character(",  
    r'\menwomen{':"person.menwomen(universal.state.get_character(",  
    r'\MenWomen{':"person.MenWomen(universal.state.get_character(",  
    r'\sirmaam{':"person.sirmaam(universal.state.get_character(",  
    r'\SirMaam{':"person.SirMaam(universal.state.get_character(",  
    r'\bastardbitch{':"person.bastardbitch(universal.state.get_character(",  
    r'\BastardBitch{':"person.BastardBitch(universal.state.get_character(",  
    r'\weaponName{':"items.weapon_name(",  
    r'\weapon{':"items.weapon_name(",
    r'\cladbottom{\pajama{}}{': "items.clad_pajama_bottom(",
    r'\cladbottom{\trousers}': "items.clad_bottom(",
    r'\muscleadj{': "person.muscle_adj(",
    r'\bumadj{': "person.bum_adj(",
    r'\liftlower{': "items.liftlower(items.lower_clothing(",
    r'\lowerlift{': "items.lowerlift(items.lower_clothing(",
    r'\liftslowers{': "items.liftslowers(items.lower_clothing(",
    r'\lowerslifts{': "items.lowerslifts(items.lower_clothing(",
    r'\liftlower{underwear}{': "items.liftlower(items.underwear(",
    r'\lowerlift{underwear}{': "items.lowerlift(items.underwear(",
    r'\liftslowers{underwear}{': "items.liftlower(items.underwear(",
    r'\lowerslifts{underwear}{': "items.lowerslifts(items.underwear(",
    r'\liftlower{pajamas}{': "items.liftlower(items.pajama_bottom(",
    r'\lowerlift{pajamas}{': "items.lowerlift(items.pajama_bottom(",
    r'\liftslowers{pajamas}{': "items.liftslowers(items.pajama_bottom(",
    r'\lowerslifts{pajamas}{': "items.lowerslifts(items.pajama_bottom(",
    r'\underwear{':"items.underwear_name(",
    r'\pajamabottoms{': "items.pajama_bottom_name(",
    r'\stealth{': "person.stealth(",
    r'\warfare{': "person.warfare(",
    r'\magic{': "person.magic(",
    r'\grapple{': "person.grapple(",
    r'\resilience{': "person.resilience("
    }

def get_args(texIter, line, numArgs):
    args = []
    origLine = line
    while len(args) < numArgs:
        while not '{' in line:
            try:
                line = next(texIter)
            except StopIteration:
                raise TranslateError('Not enough arguments for: ' + origLine + '.')
        startBraceIndex = line.index('{')
        if '}' in line:
            endBraceIndex = line.index('}')
            args.append(line[startBraceIndex+1:endBraceIndex])
        else:
            args.append(line[startBraceIndex+1:])
            while not '}' in line:
                args[-1] = ''.join([args[-1], line])
                try:
                    line = next(texIter)
                except StopIteration:
                    raise TranslateError('End brace for argument of: ' + origLine + ' not found.')
            endBraceIndex = line.index('}')
            args[-1] = ''.join([args[-1], line[:endBraceIndex]])
        nextArg = line[endBraceIndex+1:]
        if nextArg:
            line = nextArg
        else:
            try:
                line = next(texIter)
            except StopIteration:
                break
    return args
        



TAB = '    '
def append_to_function(code, newLine, tab=TAB):
    code.append(''.join([tab, newLine]))


DEBUG = True
texCmdPattern = re.compile((r'\\\w+\{\w*\}'))
def translate(fileName, charRoomFile, episodeName, nodeNum, title, episodeNum, titleTheme, tab=TAB, imports=None): 
    """
    1. Split around the environments (so from begin to end)
    2. Split each line around the commands. So a regular expression of the form \stuff whitespace
    3. Each element in the resulting list corresponds to an element in a line of the format_text. Though some commands may require us to stop and start format_line, many can just be replaced 
    inline. And really, some, like the \(e)cond commands, we could probably turn into inline if-statements.
    """
    code = IMPORTS + [' '.join(['import', charRoomFile])]
    return code + translate_envs(environment_split(fileName), nodeNum, episodeNum)

def translate_envs(envs, nodeNum, episodeNum):
    """
    Given an sprpgs-latex environment, returns a string containing the translated code.
    """
    code = []
    sceneNum = 1
    for env in envs:
        if 'node' in env[HEADER]:
            code.append(translate_node(env, nodeNum))
            nodeNum += 1
        elif 'openScene' in env[HEADER]:
            code.append(translate_open_scene(env, episodeNum, sceneNum))
            sceneNum += 1
        elif 'childnode' in env[HEADER]:
            code.append(translate_childnode(env, nodeNum))
            nodeNum += 1
        elif 'closeScene' in env[HEADER]:
            code.append(translate_close_scene(env))
        else:
            raise Exception("Don't have a translation for " + env[HEADER])
    return code

def translate_open_scene(env, episodeNum, sceneNum):
    code = '_'.join(['def start_scene', str(sceneNum), 'episode', str(episodeNum) + '(loading=False):\n'])
    code += ''.join(line for line in env[BODY])
    return code

def translate_close_scene(env):
    return '\n'.join(env[BODY])





def translate_node(env, nodeNum):
    #&&&
    return '\n'.join(env[BODY])

def translate_childnode(env, nodeNum):
    return '\n'.join(env[BODY])


HEADER = 0
BODY = 1

def environment_split(fileName):
    environments = []
    with open(fileName, 'r') as file:
        beginFound = False
        for line in file:
            if '\\begin{' in line and not ignored_environment(line):
                beginFound = True
                currentEnvironment = (line, [])
            elif '\\end{' in line and not ignored_environment(line):
                beginFound = False
                environments.append(currentEnvironment)
            elif beginFound:
                currentEnvironment[BODY].append(line)
    return environments

IGNORED_ENVS = ['\\begin{document}', '\\end{document}', '\\begin{code}', '\\end{code}']
def ignored_environment(line):
    return any(env in line for env in IGNORED_ENVS)


if DEBUG:
    import os
    pyCode = translate(os.path.join('transcripts', 'episode2.tex'), 'episode2CharRooms', 'episode_2', 326, 'Back Alleys', 2, "textCommandsMusic.CARLITA", imports=IMPORTS)
    with open('episode2.py', 'w') as episode2:
        episode2.write('\n'.join(pyCode))


    




