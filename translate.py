#!/usr/bin/python
"""
Copyright 2014 Andrew Russell

This file is part of PotionWars.
PotionWars is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

PotionWars is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with PotionWars.  If not, see <http://www.gnu.org/licenses/>.
"""

#TODO: This only works when the player is the only character with dynamic clothing.
#Before the second episode is done, we'll need to implement a way to call liftlower, etc. on
#other characters.

#TODO: Handle \child, handle \continue

"""
Usage notes:
    In order to use this translation program, you need two things:
    1. A latex source file using the sprpgs.sty file that contains the transcript for the episode.
    2. A python file that contains the character and room definitions (these SHOULD NOT be added to the file generated by this program, because the generated file WILL BE OVERWRITTEN every time
    you run this script).
"""


import string
import re
import parse
import parseTree
import transExceptions


IMPORTS = ['import universal', 'import textCommandsMusic', 'import person', 'import items', 'import pwenemies', 'import dungeonmode', 'import itemspotionwars', 'import random', 'import conversation',
        'import episode', 'import townmode','import episode']


                          #Removes comments | split around newlines and save the newlines | splits around spaces, and save the spacing | split around commands that begin an environment | split around 
                          #commands that end an environment | split around bracket and save the bracket | ditto | split around command names, and saves those names
tokenizer = re.compile(r'%.*|(\n)|(\s+)|(\\begin\{\w+\})|(\\end\{\w+\})|(\{)|(\})|(\\\w+$)')


def translate(fileName,  episodeName, episodeNum, titleCardTheme, startingNodeNum=1, imports=None, teaser='', charRooms=''):
    """
        Takes the name of a file containing LaTeX source, the node number at which we should begin numbering (defaults to 1), the name of the episode, and the number of the 
        episode, the theme song for the title card, and any imports that should be included in the generated python script.

        Returns a list of lines of python code that implement the transcript in the pandemonium engine.
    """
    if imports is None:
        imports = []
    imports.append('import ' + charRooms)    
    tokens = []
    firstSceneFound = False
    lineNum = 1
    with open(fileName, 'r') as texFile:
        for line in texFile:
            line = line.replace(r'\_', '_')
            firstSceneFound = firstSceneFound or 'openScene' in line
            if firstSceneFound:
                tokens.extend([(token, lineNum) for token in re.split(tokenizer, line) if token])
            lineNum += 1
    endFound = True
    beginFound = False
    code = imports if imports else []
    #print(tokens)
    tree = parse.parse_environments(iter(tokens), parseTree.Root(episodeNum, charRooms), startingNodeNum)
    #print(str(tree))
    code.extend(tree.translate())
    code.append('\n')
    for sceneNum in range(1, parseTree.OpenScene.sceneNum):
        print(sceneNum)
        code.append(''.join(['episode', str(episodeNum), 'Scene', str(sceneNum), ' = episode.Scene("Episode ', str(episodeNum), ' Scene ', str(sceneNum), '", ', 'start_scene_', str(sceneNum), '_episode_', str(episodeNum), ', ',
            'end_scene_', str(sceneNum), '_episode_', str(episodeNum), ')']))
    code.append(''.join(['episode', str(episodeNum), ' = episode.Episode(', str(episodeNum), ', ', "'''" + episodeName + "'''", ', ', 'scenes=[', ', '.join([''.join(['episode', str(episodeNum), 'Scene', str(sceneNum)]) 
        for sceneNum in range(1, parseTree.OpenScene.sceneNum)]), ']', ', ', 'titleTheme=', titleCardTheme, ')']))
    code.append(''.join(['episode', str(episodeNum), '.nextEpisode = ', charRooms, '.episode', str(episodeNum+1)]))
    code.append(''.join(['episode', str(episodeNum), '.init = ', tree.init_name]))
    #&&& TODO: Need to set up any other preliminary code, i.e. the start and end episode functions. Need to look at episode 1 to get a refresher on what that code is.
    return code

DEBUG = True
if DEBUG:
    import os
    try:
        pyCode = translate(os.path.join('transcripts', 'episode2.tex'), 'Back Alleys', 2, "textCommandsMusic.CARLITA", startingNodeNum=327, imports=IMPORTS, charRooms='episode2CharRooms')
    except transExceptions.TranslationError, e:
        print(str(e)) 
    else:
        with open('episode2.py', 'w') as episode2:
            episode2.write('\n'.join(pyCode))


    




